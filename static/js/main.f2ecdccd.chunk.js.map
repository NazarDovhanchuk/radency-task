{"version":3,"sources":["components/UserList.js","App.js","reportWebVitals.js","index.js"],"names":["validDate","date","currentDate","Date","someDate","correctDate","test","getTime","UserList","userList","length","className","map","user","id","fullName","classNames","phone","email","age","num","experience","income","hasChildren","licenseStates","expirationDate","licenseNumber","App","useState","contacts","setContacts","fileRef","useRef","undefined","type","accept","ref","style","display","onChange","event","reader","FileReader","onload","text","result","toLowerCase","parse","header","data","filter","list","item","index","trim","padStart","substring","toUpperCase","readAsText","target","files","onClick","current","click","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f2ecdccd.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./UserList.scss\";\nimport classNames from 'classnames';\n\nconst isInteger = (num) => {\n  return (num ^ 0) === num;\n}\n\nconst validDate = (date) => {\n  let currentDate = new Date();\n  let someDate = new Date(date);\n  const correctDate = (/\\d{2}[/]\\d{2}[/]\\d{4}/.test(date)) || (/\\d{4}-\\d{2}-\\d{2}/.test(date));\n\n  return ((someDate.getTime() > currentDate.getTime())) && correctDate;\n}\n\nconst UserList = ({userList}) =>\n  userList.length > 0 &&\n  (\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th className=\"table__row\">ID</th>\n            <th className=\"table__row\">Full Name</th>\n            <th className=\"table__row\">Phone</th>\n            <th className=\"table__row\">Email</th>\n            <th className=\"table__row\">Age</th>\n            <th className=\"table__row\">Experience</th>\n            <th className=\"table__row\">Yearly Income</th>\n            <th className=\"table__row\">Has children</th>\n            <th className=\"table__row\">License states</th>\n            <th className=\"table__row\">Expiration date</th>\n            <th className=\"table__row\">License number</th>\n          </tr>\n        </thead>\n        <tbody>\n          {userList.map((user) => (\n            <tr key={user.id}>\n              <td className=\"table__row\">{user.id}</td>\n              <td className=\"table__row\">{user.fullName}</td>\n              <td\n                className={classNames({\n                  \"table__row\": true,\n                  \"table__row--invalid\": user.phone === \"Wrong number\",\n                })}\n              >\n                {user.phone}\n              </td>\n              <td\n                className={classNames({\n                  \"table__row\": true,\n                  \"table__row--invalid\": !/^([\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4})?$/.test(user.email),\n                  })}\n              >\n                {user.email}\n              </td>\n              <td\n                className={classNames({\n                  \"table__row\": true,\n                  \"table__row--invalid\": (user.age < 21 || !isInteger(user.age)),\n                })}\n              >{user.age}</td>\n              <td\n                className={classNames({\n                  \"table__row\": true,\n                  \"table__row--invalid\": (user.experience < 0 || user.experience > user.age) ,\n                })}\n              >\n                {user.experience}\n              </td>\n              <td\n               className={classNames({\n                \"table__row\": true,\n                \"table__row--invalid\": (user.income > 1000000 || user.income < 0),\n              })}\n              >{user.income}</td>\n              <td\n                className={classNames({\n                  \"table__row\": true,\n                  \"table__row--invalid\": user.hasChildren !== \"false\" && user.hasChildren !== \"true\"\n                })}\n              >\n                {user.hasChildren}\n              </td>\n              <td className=\"table__row\">{user.licenseStates}</td>\n              <td\n                className={classNames({\n                  \"table__row\": true,\n                  \"table__row--invalid\": !validDate(user.expirationDate),\n                })}\n              >\n                {user.expirationDate}\n              </td>\n              <td\n                className={classNames({\n                  \"table__row\": true,\n                  \"table__row--invalid\": (!/\\w{6}/.test(user.licenseNumber) || user.licenseNumber.length !== 6),\n                })}>{user.licenseNumber}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n)\n\n\nexport default UserList;","import React, { useState, useRef } from 'react';\nimport { parse } from 'papaparse';\nimport UserList from './components/UserList';\n\nfunction App() {\n  const [contacts, setContacts] = useState([]);\n  const fileRef = useRef(undefined);\n\n  const handleChange = (event) => {\n\n    const reader = new FileReader();\n    reader.onload = function () {\n      const text = reader.result.toLowerCase();\n      const result = parse(text, {header: true});\n\n      setContacts(result.data\n        .filter(list => (list['full name']))\n        .map((item, index) => ({\n          id: index + 1,\n          fullName: item['full name'].trim(),\n          phone: (item['phone'].trim().length >= 10) ? item['phone'].trim().padStart(12, '+1') : \"Wrong number\",\n          email: item['email'],\n          age: +item['age'],\n          experience: item['experience'],\n          income: item['yearly income'],\n          hasChildren: item['has children'].toLowerCase(),\n          licenseStates: item['license states'].substring(0,2).toUpperCase(),\n          expirationDate: item['expiration date'],\n          licenseNumber: item['license number'],\n      })));\n    }\n\n    reader.readAsText(event.target.files[0]);\n    }\n  return (\n    <div className=\"App\">\n      <main className=\"main\">\n        <h1 className=\"main__title\">List of Users</h1>\n        <input\n          type=\"file\"\n          accept=\".csv\"\n          ref={fileRef}\n          style={{display: \"none\"}}\n          onChange={handleChange}\n        />\n        <button\n          className=\"main__file-selector\"\n          onClick={() => {\n            fileRef.current.click()\n          }}\n        >\n          Import users\n        </button>\n        \n        <UserList userList={contacts}/>  \n      </main>      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}